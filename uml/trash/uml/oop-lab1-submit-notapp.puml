@startuml
class edu.hitsz.prop.BombProp {
+ <<Create>> BombProp(int,int,int,int,int,String)
+ void activate(List<AbstractEnemy>)
}
class edu.hitsz.bullet.EnemyBullet {
+ <<Create>> EnemyBullet(int,int,int,int,int)
}
abstract class edu.hitsz.aircraft.AbstractAircraft {
# int maxHp
# int hp
+ <<Create>> AbstractAircraft(int,int,int,int,int)
+ void decreaseHp(int)
+ void increaseHp(int)
+ int getHp()
+ {abstract}List<BaseBullet> shoot()
}
class edu.hitsz.prop.BulletProp {
+ <<Create>> BulletProp(int,int,int,int,int,String)
+ void activate(HeroAircraft)
}
class edu.hitsz.aircraft.EliteEnemy {
- int shootNum
- int power
- int direction
+ <<Create>> EliteEnemy(int,int,int,int,int,int,String)
+ void forward()
+ List<BaseBullet> shoot()
+ int getShootNum()
+ void setShootNum(int)
+ int getPower()
+ void setPower(int)
}
class edu.hitsz.bullet.BaseBullet {
- int power
+ <<Create>> BaseBullet(int,int,int,int,int)
+ void forward()
+ int getPower()
}
class edu.hitsz.bullet.HeroBullet {
+ <<Create>> HeroBullet(int,int,int,int,int)
}
class edu.hitsz.aircraft.MobEnemy {
+ <<Create>> MobEnemy(int,int,int,int,int,int,String)
}
abstract class edu.hitsz.basic.FlyingObject {
# int locationX
# int locationY
# int speedX
# int speedY
# BufferedImage image
# int width
# int height
# boolean isValid
+ <<Create>> FlyingObject()
+ <<Create>> FlyingObject(int,int,int,int)
+ void forward()
+ boolean crash(FlyingObject)
+ int getLocationX()
+ int getLocationY()
+ void setLocation(double,double)
+ int getSpeedY()
+ BufferedImage getImage()
+ int getWidth()
+ int getHeight()
+ boolean notValid()
+ void vanish()
+ void explode()
}
class edu.hitsz.aircraft.HeroAircraft {
- int shootNum
- int power
- int direction
+ <<Create>> HeroAircraft(int,int,int,int,int)
+ void forward()
+ List<BaseBullet> shoot()
+ int getShootNum()
+ void setShootNum(int)
+ int getPower()
+ void setPower(int)
}
abstract class edu.hitsz.aircraft.AbstractEnemy {
- int score
- String type
+ <<Create>> AbstractEnemy(int,int,int,int,int,int,String)
+ void forward()
+ List<BaseBullet> shoot()
+ int getScore()
+ void setScore(int)
+ String getType()
}
class edu.hitsz.prop.BloodProp {
+ <<Create>> BloodProp(int,int,int,int,int,String)
+ void activate(HeroAircraft)
}
abstract class edu.hitsz.prop.AbstractProp {
+ <<Create>> AbstractProp(int,int,int,int,int,String)
+ void activate(HeroAircraft)
+ void activate(List<AbstractEnemy>)
}
class edu.hitsz.aircraft.BossEnemy {
+ <<Create>> BossEnemy(int,int,int,int,int,int,String)
}


edu.hitsz.prop.AbstractProp <|-- edu.hitsz.prop.BombProp
edu.hitsz.bullet.BaseBullet <|-- edu.hitsz.bullet.EnemyBullet
edu.hitsz.basic.FlyingObject <|-- edu.hitsz.aircraft.AbstractAircraft
edu.hitsz.prop.AbstractProp <|-- edu.hitsz.prop.BulletProp
edu.hitsz.aircraft.MobEnemy <|-- edu.hitsz.aircraft.EliteEnemy
edu.hitsz.basic.FlyingObject <|-- edu.hitsz.bullet.BaseBullet
edu.hitsz.bullet.BaseBullet <|-- edu.hitsz.bullet.HeroBullet
edu.hitsz.aircraft.AbstractEnemy <|-- edu.hitsz.aircraft.MobEnemy
edu.hitsz.aircraft.AbstractAircraft <|-- edu.hitsz.aircraft.HeroAircraft
edu.hitsz.aircraft.AbstractAircraft <|-- edu.hitsz.aircraft.AbstractEnemy
edu.hitsz.prop.AbstractProp <|-- edu.hitsz.prop.BloodProp
edu.hitsz.aircraft.AbstractEnemy <|-- edu.hitsz.prop.AbstractProp
edu.hitsz.aircraft.EliteEnemy <|-- edu.hitsz.aircraft.BossEnemy
@enduml