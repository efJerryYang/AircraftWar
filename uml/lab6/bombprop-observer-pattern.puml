@startuml
class BombProp {
+ List<BombSubscriber> subscribers
+ <<Create>> BombProp(int,int,int,int,int,String)
+ void activate(HeroAircraft,List<AbstractEnemy>,List<BaseBullet>,List<BaseBullet>,int)
+ void subscribe(BombSubscriber)
+ void unsubscribe(BombSubscriber)
+ void unsubscribe(List<BombSubscriber>)
+ void notifyAllSubscribers()
}
'abstract class AbstractGame {
'# HeroAircraft heroAircraft
'# List<AbstractEnemy> enemyAircrafts
'# List<BaseBullet> heroBullets
'# List<BaseBullet> enemyBullets
'# List<AbstractProp> props
'# BloodPropFactory bloodPropFactory
'# BulletPropFactory bulletPropFactory
'# BombPropFactory bombPropFactory
'# MobFactory mobFactory
'# EliteFactory eliteFactory
'# BossFactory bossFactory
'# RecordDAOImpl recordDAOImpl
'# ScheduledExecutorService executorService
'# MusicThread bulletHitThread
'# MusicThread bulletPropThread
'# MusicThread bombExplodeThread
'# MusicThread bloodPropThread
'# MusicThread crashWithShieldThread
'# MusicThread bgmThread
'# MusicThread bgmBossThread
'# MusicThread gameOverThread
'# boolean enableAudio
'# int baseLevel
'# double level
'# double levelScalar
'# int backGroundTop
'# int bulletValidTimeCnt
'# int bloodValidTimeCnt
'# int enemyMaxNumber
'# int enemyMaxNumberUpperBound
'# int score
'# int cycleDuration
'# int cycleTime
'# int mobCnt
'# int mobCntMax
'# int time
'# int timeInterval
'# boolean gameOverFlag
'# int scoreCnt
'# int bossCnt
'# boolean bossFlag
'# boolean bombFlag
'# boolean bloodFlag
'# boolean bulletFlag
'# boolean bulletCrash
'# boolean crashFlag
'# <<Create>> AbstractGame(int,boolean)
'+ void action()
'+ void bloodPropStageCount()
'+ void bulletPropStageCount()
'+ boolean timeCountAndNewCycleJudge()
'+ void bulletsMoveAction()
'+ {abstract}void aircraftsMoveAction()
'+ void propMoveAction()
'+ void gameOverCheck()
'+ void postProcessAction()
'+ {abstract}void generateEnemyAircrafts()
'+ {abstract}void playBGM()
'+ {abstract}void shootAction()
'+ {abstract}void crashCheckAction()
'+ void paintScoreAndLife(Graphics)
'+ void paintImageWithPositionRevised(Graphics,List<? extends AbstractFlyingObject>)
'+ void paintEnemyLife(Graphics)
'+ void paintHeroAttributes(Graphics)
'}
class MediumGame {
'- Context heroContext
'- Context enemyContext
'+ <<Create>> MediumGame(int,boolean)
'+ void generateEnemyAircrafts()
'+ void playBGM()
'+ void shootAction()
'+ void aircraftsMoveAction()
'+ void crashCheckAction()
'+ void paint(Graphics)
}
class MobEnemy {
+ void bombExplode()
}
class EliteEnemy {
+ void bombExplode()
}
interface BombSubscriber {
~ void bombExplode()
}

class DifficultGame {
'- Context heroContext
'- Context enemyContext
'+ <<Create>> DifficultGame(int,boolean)
'+ void generateEnemyAircrafts()
'+ void playBGM()
'+ void shootAction()
'+ void aircraftsMoveAction()
'+ void crashCheckAction()
'+ void paint(Graphics)
}
class SimpleGame {
'- Context heroContext
'- Context enemyContext
'+ <<Create>> SimpleGame(int,boolean)
'+ void generateEnemyAircrafts()
'+ void playBGM()
'+ void shootAction()
'+ void aircraftsMoveAction()
'+ void crashCheckAction()
'+ void paint(Graphics)
}
class BossEnemy {
+ void bombExplode()
}


MediumGame ..> BombProp
DifficultGame ..> BombProp
SimpleGame ..> BombProp
BombSubscriber ..|> MobEnemy
BombSubscriber ..|> EliteEnemy
BombSubscriber ..|> BossEnemy
BombProp o--> BombSubscriber
@enduml