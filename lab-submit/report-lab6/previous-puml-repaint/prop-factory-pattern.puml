@startuml
class BombProp {
+ List<BombSubscriber> subscribers
+ <<Create>> BombProp(int,int,int,int,int,String)
+ void activate(HeroAircraft,List<AbstractEnemy>,List<BaseBullet>,List<BaseBullet>,int)
+ void subscribe(BombSubscriber)
+ void unsubscribe(BombSubscriber)
+ void unsubscribe(List<BombSubscriber>)
+ void notifyAllSubscribers()
}
class MediumGame {
'- Context heroContext
'- Context enemyContext
'+ <<Create>> MediumGame(int,boolean)
'+ void generateEnemyAircrafts()
'+ void playBGM()
'+ void shootAction()
'+ void aircraftsMoveAction()
'+ void crashCheckAction()
'+ void paint(Graphics)
}
class BulletProp {
+ <<Create>> BulletProp(int,int,int,int,int,String)
+ void activate(HeroAircraft,List<AbstractEnemy>,List<BaseBullet>,List<BaseBullet>,int)
}
class BloodPropFactory {
- int speedX
- int speedY
- int score
+ AbstractProp createProp(int,int)
}
class BulletPropFactory {
- int speedX
- int speedY
- int score
+ AbstractProp createProp(int,int)
}
interface PropFactory {
~ AbstractProp createProp(int,int)
}
class DifficultGame {
'- Context heroContext
'- Context enemyContext
'+ <<Create>> DifficultGame(int,boolean)
'+ void generateEnemyAircrafts()
'+ void playBGM()
'+ void shootAction()
'+ void aircraftsMoveAction()
'+ void crashCheckAction()
'+ void paint(Graphics)
}
class BloodProp {
- int speedX
- int speedY
+ <<Create>> BloodProp(int,int,int,int,int,String)
+ void activate(HeroAircraft,List<AbstractEnemy>,List<BaseBullet>,List<BaseBullet>,int)
}
abstract class AbstractProp {
- int score
- String type
+ <<Create>> AbstractProp(int,int,int,int,int,String)
+ void activate(HeroAircraft,List<AbstractEnemy>,List<BaseBullet>,List<BaseBullet>,int)
+ int getScore()
+ void setScore(int)
}
class SimpleGame {
'- Context heroContext
'- Context enemyContext
'+ <<Create>> SimpleGame(int,boolean)
'+ void generateEnemyAircrafts()
'+ void playBGM()
'+ void shootAction()
'+ void aircraftsMoveAction()
'+ void crashCheckAction()
'+ void paint(Graphics)
}
class BombPropFactory {
- int speedX
- int speedY
- int score
+ AbstractProp createProp(int,int)
}


AbstractProp <|--- BombProp
AbstractProp <|--- BulletProp
AbstractProp <|--- BloodProp

PropFactory <|.. BloodPropFactory
PropFactory <|.. BulletPropFactory
PropFactory <|.. BombPropFactory

BloodPropFactory ..> BloodProp
BulletPropFactory ..> BulletProp
BombPropFactory ..> BombProp

MediumGame ..> AbstractProp
MediumGame ..> PropFactory
SimpleGame ..> AbstractProp
SimpleGame ..> PropFactory
DifficultGame ..> AbstractProp
DifficultGame ..> PropFactory
@enduml